- 연관 관계의 주인


두 객체(A, B)가 양방향 관계, 다시 말해 단방향 관계 2개(A→B, B→A)를 맺을 때, 연관 관계의 주인을 지정해야 합니다.
제어의 권한(외래 키를 비롯한 테이블 레코드를 저장, 수정, 삭제 처리)을 갖는 실질적인 관계가 어떤 것인지 JPA에게 알려준다고 생각

데이터베이스는 외래 키(FK) 하나로 두 테이블이 연관관계를 맺습니다.
즉 연관관계를 관리하는 포인트는 외래 키 하나
 JPA는 두 객체 중 하나를 정해서 외래 키를 관리하게 만들어야 하는데, 여기서 외래 키를 관리하는 객체를 연관관계의 주인이라고 합니다.
보통 외래 키를 가진 테이블과 매핑되는 엔티티가 외래 키를 관리하는 것이 효율적이므로, 보통 이곳을 연관관계의 주인으로 선택합니다.
주의할 점은 외래 키를 관리하는 연관관계의 주인만이 외래 키를 변경할 수 있으며, 주인이 아닌 곳은 읽기만 가능하다는 것

- 두 객체 (Board, Post)가 있고 양방향 연관 관계를 갖는다
게시글(Post)의 게시판을 다른 게시판(Board)으로 수정하려고 할 때,
Post 객체에서 setBoard(...) 같은 메소드를 이용해서 수정하는게 맞는지,
Board객체에서 getPosts() 같은 메소드를 이용해서 List의 게시글을 수정하는게 맞는지 헷갈릴 수 있다.
Post에서 Board를 수정할 때 FK(Foreign Key)를 수정할 지, Board에서 Post를 수정할 때 FK(Foreign Key)를 수정할 지를 결정하기 어려운 것


데이터베이스는 무조건 다(N)쪽이 외래 키를 갖습니다


- N:N 예시

Customer - package
: 고객 한 명은 여러 개의 여행 상품을 가질 수 있고, 여행 상품 하나는 여러 개의 고객을 가질 수 있다.
이러한 다대다 관계 형성을 위해서는  조인 테이블이 필요하다.

Customer ( 1 ) - customer_package (N )  - package (1 )
customer_id             cp_id              package_id
name                  customer_id          package_name
                      package_id

customer_package 테이블에서는 고객 한 명이 여러 개의 여행 상품을 가질 수 있고,
여행 상품 하나가 여러 개의 고객을 가질 수 있다.
customer_package 테이블은 customer_id와 package_id를 묶어주는 역할을 수행한다.
이 테이블을 통해 고객이 몇 개의 여행 상품을 구매했는지
어떤 여행 상품이 몇 명의 고객을 가지고 있느지 등을 확인할 수 있다.
조인 테이블에도 기본키는 반드시 있어야 한다.


자기 참조 관계
ex) 회원 테이블에서 추천인이 누구인지 파악하기 위해 사용


질문 (1) - 태그 ( N)


/*// tagValue 리스트를 입력 받아, 입력 받은 수의 크기를 가지는 Tag 타입의 List 생성
        List<Tag> tags = new ArrayList<>();
        for(String tagValue : questionPostDto.getTagValues())
            tags.add(tagService.findTagByTagValue(tagValue));*/
//추가한 부분 : 각 tag에 현재 question 객체 담기
        //for(Tag tag : tags)
        //    tag.setQuestion(question);
        // -> Question 내부에 tag 존재하고, tag 내부에 question 존재하기 때문에 무한 반복된다
                //question의 태그 리스트인 tags에 찾으려는 tag가 있는지 확인
                // 해당 태그를 가진 모든 question을 불러오자!

  @GetMapping("/qListByTagId/{tag-id}")
//page, 질문마다 가 존재 -> 지정한 tag를 가지는 모든 질문을 찾아서 tagQuestions에 담는다.
//Question 태그 내부에 question을 가져와야 한다!!!!!!!!!!!!!!!!!

@PatchMapping("/edit/{question-id}")
  /*// tagValue 리스트를 입력 받아, 입력 받은 수의 크기를 가지는 Tag 타입의 List 생성
        List<Tag> tags = new ArrayList<>();
        for(String tagValue : questionPatchDto.getTagValues())
            tags.add(tagService.findTagByTagValue(tagValue));*/